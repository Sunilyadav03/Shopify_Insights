Step 1: Fetch Inventory Data (Ending_quantity)

#Key Fields:
#1. title: Maps to Product_title.
#2. sku: Maps to Product_variant_sku.
#3. inventoryQuantity: Maps to Ending_quantity (current inventory as of April 21, 2025).

query InventorySales {
  products(first: 100) {
    edges {
      node {
        id
        title
        variants(first: 10) {
          edges {
            node {
              id
              sku
              inventoryQuantity
            }
          }
        }
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}


#2nd way:- Bulk mutation based

mutation bulkOperationRunQuery($query: String!) {
  bulkOperationRunQuery(query: $query) {
    bulkOperation {
      id
      status
      url
    }
    userErrors {
      field
      message
    }
  }
}

#Variable tab
{
  "query": "{\n  products(first: 100) {\n    edges {\n      node {\n        id\n        title\n        variants(first: 10) {\n          edges {\n            node {\n              id\n              sku\n              inventoryQuantity\n              inventoryItem {\n                inventoryLevels(first: 1) {\n                  edges {\n                    node {\n                      quantities(names: [\"AVAILABLE\"]) {\n                        name\n                        quantity\n                      }\n                      location { id name }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"
}

#After all of this 
query {
  node(id: "your product Id") {
    ... on BulkOperation {
      id
      status
      url
      errorCode
      objectCount
    }
  }
}



Step 2: Fetch Sales Data (Quantity_sold)
#Use the sales query to calculate Quantity_sold by summing line item quantities for orders from April 1–21, 2025:

#Key Fields:
#1. lineItems.quantity: Units sold for each variant.
#2. variant.sku: Links sales to inventory data.

query SalesData {
  orders(first: 100, query: "created_at:>=2025-04-01 created_at:<=2025-04-21") {
    edges {
      node {
        id
        createdAt
        lineItems(first: 10) {
          edges {
            node {
              quantity
              variant {
                id
                sku
                product {
                  title
                }
              }
            }
          }
        }
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}

#same sales data fetch with bulk mutation

mutation bulkOperationRunQuery($query: String!) {
  bulkOperationRunQuery(query: $query) {
    bulkOperation {
      id
      status
      url
    }
    userErrors {
      field
      message
    }
  }
}

#Variable tab
{
  "query": "{\n  orders(query: \"created_at:>=2025-04-01 created_at:<=2025-04-21\", first: 100) {\n    edges {\n      node {\n        id\n        createdAt\n        lineItems(first: 10) {\n          edges {\n            node {\n              quantity\n              variant {\n                id\n                sku\n                product {\n                  title\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"
}

#Run this, after copying "id"

query {
  node(id: "Write the Id, Copy from above query response") {
    ... on BulkOperation {
      id
      status
      url
      errorCode
      objectCount
    }
  }
}



# Step 3: Approximate Starting_quantity
# For each variant:

Ending_quantity: From inventoryQuantity in the inventory query.
Quantity_sold: Sum of quantity for the variant’s sku from the sales query.

```
Starting_quantity: Calculate as Ending_quantity + Quantity_sold.
```

# Step 4: Calculate Sell_through_rate
```
Sell_through_rate = (Quantity_sold / Starting_quantity) * 100
```



#Clubbed data fetching
#Purpose: Fetches product inventory (id, title, variants with sku, inventoryQuantity, and quantities[AVAILABLE]) and orders (April 1–21, 2025) with lineItems.quantity for Inventory_sales metrics.

mutation bulkOperationRunQuery($query: String!) {
  bulkOperationRunQuery(query: $query) {
    bulkOperation {
      id
      status
      url
    }
    userErrors {
      field
      message
    }
  }
}



#Variable(In variable tab):- 

{
  "query": "{\n  products(first: 100) {\n    edges {\n      node {\n        id\n        title\n        variants(first: 10) {\n          edges {\n            node {\n              id\n              sku\n              inventoryQuantity\n              inventoryItem {\n                inventoryLevels(first: 1) {\n                  edges {\n                    node {\n                      quantities(names: [\"AVAILABLE\"]) {\n                        name\n                        quantity\n                      }\n                      location { id name }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  orders(query: \"created_at:>=2025-04-01 created_at:<=2025-04-21\", first: 100) {\n    edges {\n      node {\n        id\n        createdAt\n        lineItems(first: 10) {\n          edges {\n            node {\n              quantity\n              variant {\n                id\n                sku\n                product {\n                  title\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"
}


# After Running this, Run the following query:-

query {
  node(id: "Write the Id, Copy from above query response") {
    ... on BulkOperation {
      id
      status
      url
      errorCode
      objectCount
    }
  }
}

# The above Poll return an URL(Once status: COMPLETED) -->use the url to download JSONL File
